generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int       @id @default(autoincrement())
  name    String?
  address String    @unique
  tasks   Task[]
  Payouts Payouts[]
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String?      @default("Untitled Task")
  options     Option[]
  user_id     Int
  user        User         @relation(fields: [user_id], references: [id])
  signature   String
  amount      Int
  done        Boolean      @default(false)
  submissions Submission[]
}

model Option {
  id          Int          @id @default(autoincrement())
  image_url   String
  task_id     Int
  task        Task         @relation(fields: [task_id], references: [id])
  submissions Submission[]
}

model Worker {
  id             Int          @id @default(autoincrement())
  name           String?
  address        String       @unique
  submissions    Submission[]
  pending_amount Int
  locked_amount  Int
}

model Submission {
  id        Int    @id @default(autoincrement())
  worker_id Int
  worker    Worker @relation(fields: [worker_id], references: [id])
  option_id Int
  option    Option @relation(fields: [option_id], references: [id])
  task_id   Int
  task      Task   @relation(fields: [task_id], references: [id])
  amount    Int

  @@unique([worker_id, task_id])
}

model Payouts {
  id        Int       @id @default(autoincrement())
  user_id   Int
  user      User      @relation(fields: [user_id], references: [id])
  amount    Int
  signature String
  status    TxnStatus
}

enum TxnStatus{
  Processing
  Success
  Failure
}
//Think for More optimal solution
// model SubmissionCache{
//   id     Int     @id @default(autoincrement())
//   task_id Int
//   task    Task    @relation(fields: [task_id], references: [id])
//   option1 Int
//   option2 Int
//   option3 Int
//   option4 Int
// }
